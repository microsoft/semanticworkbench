{
  // Semantic Workbench connector settings
  "Workbench": {
    // Unique ID of the service. Semantic Workbench will store this event to identify the server
    // so you should keep the value fixed to match the conversations tracked across service restarts.
    "ConnectorId": "AgentExample01",
    // The endpoint of your service, where semantic workbench will send communications too.
    // This should match hostname, port, protocol and path of the web service. You can use
    // this also to route semantic workbench through a proxy or a gateway if needed.
    "ConnectorEndpoint": "http://127.0.0.1:9101/myagents",
    // Semantic Workbench endpoint.
    "WorkbenchEndpoint": "http://127.0.0.1:3000",
    // Name of your agent service
    "ConnectorName": ".NET Multi Agent Service",
    // Description of your agent service.
    "ConnectorDescription": "Multi-agent service for .NET agents",
    // Where to store agents settings and conversations
    // See AgentServiceStorage class.
    "StoragePathLinux": "/tmp/.sw",
    "StoragePathWindows": "$tmp\\.sw"
  },
  // You agent settings
  "Agent": {
    "Name": "Agent1",
    "ReplyToAgents": false,
    "CommandsEnabled": true
  },
  // Web service settings
  "AllowedHosts": "*",
  "Kestrel": {
    "Endpoints": {
      "Http": {
        "Url": "http://*:9101"
      }
      // "Https": {
      //  "Url": "https://*:19101"
      // }
    }
  },
  // .NET Logger settings
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Information"
    },
    "Console": {
      "LogToStandardErrorThreshold": "Critical",
      "FormatterName": "simple",
      "FormatterOptions": {
        "TimestampFormat": "[HH:mm:ss.fff] ",
        "SingleLine": true,
        "UseUtcTimestamp": false,
        "IncludeScopes": false,
        "JsonWriterOptions": {
          "Indented": true
        }
      }
    }
  }
}