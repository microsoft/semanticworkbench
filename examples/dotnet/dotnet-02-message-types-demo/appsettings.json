{
  // Semantic Workbench connector settings
  "Workbench": {
    // Unique ID of the service. Semantic Workbench will store this event to identify the server
    // so you should keep the value fixed to match the conversations tracked across service restarts.
    "ConnectorId": "AgentExample02",
    // The host where the connector receives requests sent by the workbench.
    // Locally, this is usually "http://127.0.0.1:<some port>"
    // On Azure, this will be something like "https://contoso.azurewebsites.net"
    // Leave this setting empty to use "127.0.0.1" and autodetect the port in use.
    // You can use an env var to set this value, e.g. Workbench__ConnectorHost=https://contoso.azurewebsites.net
    "ConnectorHost": "",
    // This is the prefix of all the endpoints exposed by the connector
    "ConnectorApiPrefix": "/myagents",
    // Semantic Workbench endpoint.
    "WorkbenchEndpoint": "http://127.0.0.1:3000",
    // Name of your agent service
    "ConnectorName": ".NET Multi Agent Service",
    // Description of your agent service.
    "ConnectorDescription": "Multi-agent service for .NET agents",
    // Where to store agents settings and conversations
    // See AgentServiceStorage class.
    "StoragePathLinux": "/tmp/.sw",
    "StoragePathWindows": "$tmp\\.sw"
  },
  // You agent settings
  "Agent": {
    "Name": "Agent2",
    "ReplyToAgents": false,
    "CommandsEnabled": true,
    "Behavior": "none"
  },
  // Azure Content Safety settings
  "AzureContentSafety": {
    "Endpoint": "https://....cognitiveservices.azure.com/",
    "AuthType": "ApiKey",
    "ApiKey": "..."
  },
  // .NET Logger settings
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Information"
    },
    "Console": {
      "LogToStandardErrorThreshold": "Critical",
      "FormatterName": "simple",
      "FormatterOptions": {
        "TimestampFormat": "[HH:mm:ss.fff] ",
        "SingleLine": true,
        "UseUtcTimestamp": false,
        "IncludeScopes": false,
        "JsonWriterOptions": {
          "Indented": true
        }
      }
    }
  }
}