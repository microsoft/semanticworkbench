[tool.poetry]
name = "semantic-workbench-service"
version = "0.1.0"
description = "Library for facilitating the implementation of FastAPI-based Semantic Workbench essistants."
authors = ["Semantic Workbench Team"]
readme = "README.md"
packages= [
    { include = "semantic_workbench_service" },
]

[tool.poetry.dependencies]
python = "~3.11"
aiosqlite = "~0.20.0"
alembic = "~1.13.1"
# anyio is pinned to 4.3.0 because of a change in 4.4.0 (Emit a ResourceWarning for MemoryObjectReceiveStream and MemoryObjectSendStream that were garbage collected without being closed (PR by Andrey Kazantcev))
# that causes a warning in the tests. hopefully this will be fixed in the next version starlette TestClient.
anyio = "4.3.0"
asgi-correlation-id = "^4.3.1"
asyncpg = "~0.29.0"
azure-keyvault-secrets = "^4.8.0"
azure-identity = "^1.16.0"
azure-core = { version = "*", extras = ["aio"] }
cachetools = "^5.3.3"
fastapi = "~0.110.0"
greenlet = "~3.0.3"
httpx = "~0.27.0"
jsonschema = "^4.20.0"
openai = "~1.14.2"
pydantic-settings = "~2.3.3"
python-dotenv = "~1.0.0"
python-jose = { version = "*", extras = ["cryptography"] }
python-json-logger = "^2.0.7"
python-multipart = "~0.0.6"
rich = "^13.7.0"
semantic-workbench-api-model = { path = "../semantic-workbench-api-model", develop = true }
# semantic-workbench-assistant is used for integration tests
semantic-workbench-assistant = { path = "../semantic-workbench-assistant", develop = true, optional = true }
sqlmodel = "~0.0.14"
sse-starlette = "~1.8.2"
uvicorn = { version = "*", extras = ["standard"] }

asgi-lifespan = { version = "^2.1.0", optional = true }
black = { version = "^24.3.0", optional = true }
flake8 = { version = "^6.1.0", optional = true }
pytest = { version = "^7.4.3", optional = true }
pytest-asyncio = {version = "^0.23.5.post1", optional = true}
pytest-docker = { version = "^3.1.1", optional = true }
pytest-httpx = { version = "^0.30.0", optional = true }

[tool.poetry.extras]
dev = ["asgi-lifespan", "black", "flake8", "pytest", "pytest-asyncio", "pytest-docker", "pytest-httpx", "semantic-workbench-assistant"]

[tool.poetry.scripts]
start-semantic-workbench-service = "semantic_workbench_service.start:main"

[build-system]
requires = ["poetry-core>=1.2.0"]
build-backend = "poetry.core.masonry.api"

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
line_length = 120
profile = "black"

[tool.pyright]
exclude = ["venv", ".venv"]
