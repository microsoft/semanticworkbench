import * as vscode from 'vscode';
import { z } from 'zod';
const activeSessions = [];
vscode.debug.onDidStartDebugSession((session) => {
    activeSessions.push(session);
});
vscode.debug.onDidTerminateDebugSession((session) => {
    const index = activeSessions.indexOf(session);
    if (index >= 0) {
        activeSessions.splice(index, 1);
    }
});
export const listDebugSessions = () => {
    const sessions = activeSessions.map((session) => ({
        id: session.id,
        name: session.name,
        configuration: session.configuration,
    }));
    return {
        content: [
            {
                type: 'json',
                json: { sessions },
            },
        ],
        isError: false,
    };
};
export const listDebugSessionsSchema = z.object({});
export const startDebugSession = async (params) => {
    const { workspaceFolder, configuration } = params;
    const workspaceFolders = vscode.workspace.workspaceFolders;
    if (!workspaceFolders || workspaceFolders.length === 0) {
        throw new Error('No workspace folders are currently open.');
    }
    const folder = workspaceFolders.find((f) => f.uri?.fsPath === workspaceFolder);
    if (!folder) {
        throw new Error(`Workspace folder '${workspaceFolder}' not found.`);
    }
    const success = await vscode.debug.startDebugging(folder, configuration);
    if (!success) {
        throw new Error(`Failed to start debug session '${configuration.name}'.`);
    }
    return {
        content: [{ type: 'text', text: `Debug session '${configuration.name}' started successfully.` }],
        isError: false,
    };
};
export const startDebugSessionSchema = z.object({
    workspaceFolder: z.string().describe('The workspace folder where the debug session should start.'),
    configuration: z
        .object({
        type: z.string().describe("Type of the debugger (e.g., 'node', 'python', etc.)."),
        request: z.string().describe("Type of debug request (e.g., 'launch' or 'attach')."),
        name: z.string().describe('Name of the debug session.'),
    })
        .passthrough()
        .describe('The debug configuration object.'),
});
export const stopDebugSession = async (params) => {
    const { sessionName } = params;
    const matchingSessions = activeSessions.filter((session) => session.name === sessionName);
    if (matchingSessions.length === 0) {
        return {
            content: [
                {
                    type: 'text',
                    text: `No debug session(s) found with name '${sessionName}'.`,
                },
            ],
            isError: true,
        };
    }
    for (const session of matchingSessions) {
        await vscode.debug.stopDebugging(session);
    }
    return {
        content: [
            {
                type: 'text',
                text: `Stopped debug session(s) with name '${sessionName}'.`,
            },
        ],
        isError: false,
    };
};
export const stopDebugSessionSchema = z.object({
    sessionName: z.string().describe('The name of the debug session(s) to stop.'),
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVidWdfdG9vbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdG9vbHMvZGVidWdfdG9vbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLE1BQU0sTUFBTSxRQUFRLENBQUM7QUFDakMsT0FBTyxFQUFFLENBQUMsRUFBRSxNQUFNLEtBQUssQ0FBQztBQUd4QixNQUFNLGNBQWMsR0FBMEIsRUFBRSxDQUFDO0FBR2pELE1BQU0sQ0FBQyxLQUFLLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtJQUM1QyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ2pDLENBQUMsQ0FBQyxDQUFDO0FBR0gsTUFBTSxDQUFDLEtBQUssQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO0lBQ2hELE1BQU0sS0FBSyxHQUFHLGNBQWMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDOUMsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDYixjQUFjLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNwQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFPSCxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxHQUFHLEVBQUU7SUFFbEMsTUFBTSxRQUFRLEdBQUcsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQTRCLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDbkUsRUFBRSxFQUFFLE9BQU8sQ0FBQyxFQUFFO1FBQ2QsSUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJO1FBQ2xCLGFBQWEsRUFBRSxPQUFPLENBQUMsYUFBYTtLQUN2QyxDQUFDLENBQUMsQ0FBQztJQUdKLE9BQU87UUFDSCxPQUFPLEVBQUU7WUFDTDtnQkFDSSxJQUFJLEVBQUUsTUFBTTtnQkFDWixJQUFJLEVBQUUsRUFBRSxRQUFRLEVBQUU7YUFDckI7U0FDSjtR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SyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQsT0FBTztRQUNILE9BQU8sRUFBRTtZQUNMO2dCQUNJLElBQUksRUFBRSxNQUFNO2dCQUNaLElBQUksRUFBRSx1Q0FBdUMsV0FBVyxJQUFJO2FBQy9EO1NBQ0o7UUFDRCxPQUFPLEVBQUUsS0FBSztLQUNqQixDQUFDO0FBQ04sQ0FBQyxDQUFDO0FBR0YsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQztJQUMzQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQywyQ0FBMkMsQ0FBQztDQUNoRixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyB2c2NvZGUgZnJvbSAndnNjb2RlJztcbmltcG9ydCB7IHogfSBmcm9tICd6b2QnO1xuXG4vKiogTWFpbnRhaW4gYSBsaXN0IG9mIGFjdGl2ZSBkZWJ1ZyBzZXNzaW9ucy4gKi9cbmNvbnN0IGFjdGl2ZVNlc3Npb25zOiB2c2NvZGUuRGVidWdTZXNzaW9uW10gPSBbXTtcblxuLy8gVHJhY2sgbmV3IGRlYnVnIHNlc3Npb25zIGFzIHRoZXkgc3RhcnQuXG52c2NvZGUuZGVidWcub25EaWRTdGFydERlYnVnU2Vzc2lvbigoc2Vzc2lvbikgPT4ge1xuICAgIGFjdGl2ZVNlc3Npb25zLnB1c2goc2Vzc2lvbik7XG59KTtcblxuLy8gUmVtb3ZlIGRlYnVnIHNlc3Npb25zIGFzIHRoZXkgdGVybWluYXRlLlxudnNjb2RlLmRlYnVnLm9uRGlkVGVybWluYXRlRGVidWdTZXNzaW9uKChzZXNzaW9uKSA9PiB7XG4gICAgY29uc3QgaW5kZXggPSBhY3RpdmVTZXNzaW9ucy5pbmRleE9mKHNlc3Npb24pO1xuICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgIGFjdGl2ZVNlc3Npb25zLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxufSk7XG5cbi8qKlxuICogTGlzdCBhbGwgYWN0aXZlIGRlYnVnIHNlc3Npb25zIGluIHRoZSB3b3Jrc3BhY2UuXG4gKlxuICogRXhwb3NlcyBkZWJ1ZyBzZXNzaW9uIGluZm9ybWF0aW9uLCBpbmNsdWRpbmcgZWFjaCBzZXNzaW9uJ3MgSUQsIG5hbWUsIGFuZCBhc3NvY2lhdGVkIGxhdW5jaCBjb25maWd1cmF0aW9uLlxuICovXG5leHBvcnQgY29uc3QgbGlzdERlYnVnU2Vzc2lvbnMgPSAoKSA9PiB7XG4gICAgLy8gUmV0cmlldmUgYWxsIGFjdGl2ZSBkZWJ1ZyBzZXNzaW9ucyB1c2luZyB0aGUgYWN0aXZlU2Vzc2lvbnMgYXJyYXkuXG4gICAgY29uc3Qgc2Vzc2lvbnMgPSBhY3RpdmVTZXNzaW9ucy5tYXAoKHNlc3Npb246IHZzY29kZS5EZWJ1Z1Nlc3Npb24pID0+ICh7XG4gICAgICAgIGlkOiBzZXNzaW9uLmlkLFxuICAgICAgICBuYW1lOiBzZXNzaW9uLm5hbWUsXG4gICAgICAgIGNvbmZpZ3VyYXRpb246IHNlc3Npb24uY29uZmlndXJhdGlvbixcbiAgICB9KSk7XG5cbiAgICAvLyBSZXR1cm4gc2Vzc2lvbiBsaXN0XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY29udGVudDogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdqc29uJyxcbiAgICAgICAgICAgICAgICBqc29uOiB7IHNlc3Npb25zIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpc0Vycm9yOiBmYWxzZSxcbiAgICB9O1xufTtcblxuLy8gWm9kIHNjaGVtYSBmb3IgdmFsaWRhdGluZyB0b29sIHBhcmFtZXRlcnMgKG5vbmUgZm9yIHRoaXMgdG9vbCkuXG5leHBvcnQgY29uc3QgbGlzdERlYnVnU2Vzc2lvbnNTY2hlbWEgPSB6Lm9iamVjdCh7fSk7XG5cbi8qKlxuICogU3RhcnQgYSBuZXcgZGVidWcgc2Vzc2lvbiB1c2luZyB0aGUgcHJvdmlkZWQgY29uZmlndXJhdGlvbi5cbiAqXG4gKiBAcGFyYW0gcGFyYW1zIC0gT2JqZWN0IGNvbnRhaW5pbmcgd29ya3NwYWNlRm9sZGVyIGFuZCBjb25maWd1cmF0aW9uIGRldGFpbHMuXG4gKi9cbmV4cG9ydCBjb25zdCBzdGFydERlYnVnU2Vzc2lvbiA9IGFzeW5jIChwYXJhbXM6IHtcbiAgICB3b3Jrc3BhY2VGb2xkZXI6IHN0cmluZztcbiAgICBjb25maWd1cmF0aW9uOiB7IHR5cGU6IHN0cmluZzsgcmVxdWVzdDogc3RyaW5nOyBuYW1lOiBzdHJpbmc7IFtrZXk6IHN0cmluZ106IGFueSB9O1xufSkgPT4ge1xuICAgIGNvbnN0IHsgd29ya3NwYWNlRm9sZGVyLCBjb25maWd1cmF0aW9uIH0gPSBwYXJhbXM7XG4gICAgLy8gRW5zdXJlIHRoYXQgd29ya3NwYWNlIGZvbGRlcnMgZXhpc3QgYW5kIGFyZSBhY2Nlc3NpYmxlLlxuICAgIGNvbnN0IHdvcmtzcGFjZUZvbGRlcnMgPSB2c2NvZGUud29ya3NwYWNlLndvcmtzcGFjZUZvbGRlcnM7XG4gICAgaWYgKCF3b3Jrc3BhY2VGb2xkZXJzIHx8IHdvcmtzcGFjZUZvbGRlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gd29ya3NwYWNlIGZvbGRlcnMgYXJlIGN1cnJlbnRseSBvcGVuLicpO1xuICAgIH1cblxuICAgIGNvbnN0IGZvbGRlciA9IHdvcmtzcGFjZUZvbGRlcnMuZmluZCgoZikgPT4gZi51cmk/LmZzUGF0aCA9PT0gd29ya3NwYWNlRm9sZGVyKTtcbiAgICBpZiAoIWZvbGRlcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFdvcmtzcGFjZSBmb2xkZXIgJyR7d29ya3NwYWNlRm9sZGVyfScgbm90IGZvdW5kLmApO1xuICAgIH1cblxuICAgIGNvbnN0IHN1Y2Nlc3MgPSBhd2FpdCB2c2NvZGUuZGVidWcuc3RhcnREZWJ1Z2dpbmcoZm9sZGVyLCBjb25maWd1cmF0aW9uKTtcblxuICAgIGlmICghc3VjY2Vzcykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBzdGFydCBkZWJ1ZyBzZXNzaW9uICcke2NvbmZpZ3VyYXRpb24ubmFtZX0nLmApO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIGNvbnRlbnQ6IFt7IHR5cGU6ICd0ZXh0JywgdGV4dDogYERlYnVnIHNlc3Npb24gJyR7Y29uZmlndXJhdGlvbi5uYW1lfScgc3RhcnRlZCBzdWNjZXNzZnVsbHkuYCB9XSxcbiAgICAgICAgaXNFcnJvcjogZmFsc2UsXG4gICAgfTtcbn07XG5cbi8vIFpvZCBzY2hlbWEgZm9yIHZhbGlkYXRpbmcgc3RhcnRfZGVidWdfc2Vzc2lvbiBwYXJhbWV0ZXJzLlxuZXhwb3J0IGNvbnN0IHN0YXJ0RGVidWdTZXNzaW9uU2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHdvcmtzcGFjZUZvbGRlcjogei5zdHJpbmcoKS5kZXNjcmliZSgnVGhlIHdvcmtzcGFjZSBmb2xkZXIgd2hlcmUgdGhlIGRlYnVnIHNlc3Npb24gc2hvdWxkIHN0YXJ0LicpLFxuICAgIGNvbmZpZ3VyYXRpb246IHpcbiAgICAgICAgLm9iamVjdCh7XG4gICAgICAgICAgICB0eXBlOiB6LnN0cmluZygpLmRlc2NyaWJlKFwiVHlwZSBvZiB0aGUgZGVidWdnZXIgKGUuZy4sICdub2RlJywgJ3B5dGhvbicsIGV0Yy4pLlwiKSxcbiAgICAgICAgICAgIHJlcXVlc3Q6IHouc3RyaW5nKCkuZGVzY3JpYmUoXCJUeXBlIG9mIGRlYnVnIHJlcXVlc3QgKGUuZy4sICdsYXVuY2gnIG9yICdhdHRhY2gnKS5cIiksXG4gICAgICAgICAgICBuYW1lOiB6LnN0cmluZygpLmRlc2NyaWJlKCdOYW1lIG9mIHRoZSBkZWJ1ZyBzZXNzaW9uLicpLFxuICAgICAgICB9KVxuICAgICAgICAucGFzc3Rocm91Z2goKVxuICAgICAgICAuZGVzY3JpYmUoJ1RoZSBkZWJ1ZyBjb25maWd1cmF0aW9uIG9iamVjdC4nKSxcbn0pO1xuXG4vKipcbiAqIFN0b3AgZGVidWcgc2Vzc2lvbnMgdGhhdCBtYXRjaCB0aGUgcHJvdmlkZWQgc2Vzc2lvbiBuYW1lLlxuICpcbiAqIEBwYXJhbSBwYXJhbXMgLSBPYmplY3QgY29udGFpbmluZyB0aGUgc2Vzc2lvbk5hbWUgdG8gc3RvcC5cbiAqL1xuZXhwb3J0IGNvbnN0IHN0b3BEZWJ1Z1Nlc3Npb24gPSBhc3luYyAocGFyYW1zOiB7IHNlc3Npb25OYW1lOiBzdHJpbmcgfSkgPT4ge1xuICAgIGNvbnN0IHsgc2Vzc2lvbk5hbWUgfSA9IHBhcmFtcztcbiAgICAvLyBGaWx0ZXIgYWN0aXZlIHNlc3Npb25zIHRvIGZpbmQgbWF0Y2hpbmcgc2Vzc2lvbnMuXG4gICAgY29uc3QgbWF0Y2hpbmdTZXNzaW9ucyA9IGFjdGl2ZVNlc3Npb25zLmZpbHRlcigoc2Vzc2lvbjogdnNjb2RlLkRlYnVnU2Vzc2lvbikgPT4gc2Vzc2lvbi5uYW1lID09PSBzZXNzaW9uTmFtZSk7XG5cbiAgICBpZiAobWF0Y2hpbmdTZXNzaW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogYE5vIGRlYnVnIHNlc3Npb24ocykgZm91bmQgd2l0aCBuYW1lICcke3Nlc3Npb25OYW1lfScuYCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGlzRXJyb3I6IHRydWUsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gU3RvcCBlYWNoIG1hdGNoaW5nIGRlYnVnIHNlc3Npb24uXG4gICAgZm9yIChjb25zdCBzZXNzaW9uIG9mIG1hdGNoaW5nU2Vzc2lvbnMpIHtcbiAgICAgICAgYXdhaXQgdnNjb2RlLmRlYnVnLnN0b3BEZWJ1Z2dpbmcoc2Vzc2lvbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgY29udGVudDogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgICAgICB0ZXh0OiBgU3RvcHBlZCBkZWJ1ZyBzZXNzaW9uKHMpIHdpdGggbmFtZSAnJHtzZXNzaW9uTmFtZX0nLmAsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpc0Vycm9yOiBmYWxzZSxcbiAgICB9O1xufTtcblxuLy8gWm9kIHNjaGVtYSBmb3IgdmFsaWRhdGluZyBzdG9wX2RlYnVnX3Nlc3Npb24gcGFyYW1ldGVycy5cbmV4cG9ydCBjb25zdCBzdG9wRGVidWdTZXNzaW9uU2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHNlc3Npb25OYW1lOiB6LnN0cmluZygpLmRlc2NyaWJlKCdUaGUgbmFtZSBvZiB0aGUgZGVidWcgc2Vzc2lvbihzKSB0byBzdG9wLicpLFxufSk7XG4iXX0=