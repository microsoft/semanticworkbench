import * as vscode from 'vscode';
import { focusEditorTool } from './focus_editor';
export async function searchSymbolTool({ query, useDefinition = true, maxResults = 50, openFile = false, }) {
    const results = { definition: null, globalSearch: [] };
    if (useDefinition && vscode.window.activeTextEditor) {
        const editor = vscode.window.activeTextEditor;
        const position = editor.selection.active;
        const uri = editor.document.uri;
        const definitionResults = await vscode.commands.executeCommand('vscode.executeDefinitionProvider', uri, position);
        if (definitionResults && definitionResults.length > 0) {
            const def = definitionResults[0];
            results.definition = {
                file: def.uri.fsPath,
                startLine: def.range.start.line,
                startColumn: def.range.start.character,
                endLine: def.range.end.line,
                endColumn: def.range.end.character,
                snippet: def.range.start.line === def.range.end.line ? editor.document.getText(def.range) : '',
            };
            if (openFile) {
                await focusEditorTool({
                    filePath: def.uri.fsPath,
                    startLine: def.range.start.line,
                    startColumn: def.range.start.character,
                    endLine: def.range.end.line,
                    endColumn: def.range.end.character,
                });
            }
        }
    }
    const globalSearchResults = [];
    await vscode.commands.executeCommand('vscode.executeWorkspaceSymbolProvider', query, ({ uri, ranges, preview }) => {
        const match = {
            file: uri.fsPath,
            line: ranges[0].start.line,
            snippet: preview.text.trim(),
        };
        if (globalSearchResults.length < maxResults) {
            globalSearchResults.push({
                file: match.file,
                line: match.line,
                snippet: match.snippet,
            });
        }
    });
    results.globalSearch = globalSearchResults;
    if (openFile && globalSearchResults.length > 0) {
        const firstMatch = globalSearchResults[0];
        await focusEditorTool({ filePath: firstMatch.file, line: firstMatch.line, column: 0 });
    }
    return results;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoX3N5bWJvbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90b29scy9zZWFyY2hfc3ltYm9sLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxNQUFNLE1BQU0sUUFBUSxDQUFDO0FBQ2pDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVqRCxNQUFNLENBQUMsS0FBSyxVQUFVLGdCQUFnQixDQUFDLEVBQ25DLEtBQUssRUFDTCxhQUFhLEdBQUcsSUFBSSxFQUNwQixVQUFVLEdBQUcsRUFBRSxFQUNmLFFBQVEsR0FBRyxLQUFLLEdBTW5CO0lBQ0csTUFBTSxPQUFPLEdBVVQsRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxFQUFFLEVBQUUsQ0FBQztJQUczQyxJQUFJLGFBQWEsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDbEQsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQztRQUM5QyxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztRQUN6QyxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQztRQUVoQyxNQUFNLGlCQUFpQixHQUFHLE1BQU0sTUFBTSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQzFELGtDQUFrQyxFQUNsQyxHQUFHLEVBQ0gsUUFBUSxDQUNYLENBQUM7UUFFRixJQUFJLGlCQUFpQixJQUFJLGlCQUFpQixDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUNwRCxNQUFNLEdBQUcsR0FBRyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqQyxPQUFPLENBQUMsVUFBVSxHQUFHO2dCQUNqQixJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNO2dCQUNwQixTQUFTLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSTtnQkFDL0IsV0FBVyxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFNBQVM7Z0JBQ3RDLE9BQU8sRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJO2dCQUMzQixTQUFTLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsU0FBUztnQkFDbEMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTthQUNqRyxDQUFDO1lBR0YsSUFBSSxRQUFRLEVBQUUsQ0FBQztnQkFDWCxNQUFNLGVBQWUsQ0FBQztvQkFDbEIsUUFBUSxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTTtvQkFDeEIsU0FBUyxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUk7b0JBQy9CLFdBQVcsRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxTQUFTO29CQUN0QyxPQUFPLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSTtvQkFDM0IsU0FBUyxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFNBQVM7aUJBQ3JDLENBQUMsQ0FBQztZQUNQLENBQUM7UUFDTCxDQUFDO0lBQ0wsQ0FBQztJQUdELE1BQU0sbUJBQW1CLEdBQWUsRUFBRSxDQUFDO0lBQzNDLE1BQU0sTUFBTSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQ2hDLHVDQUF1QyxFQUN2QyxLQUFLLEVBQ0wsQ0FBQyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUEwRSxFQUFFLEVBQUU7UUFDakcsTUFBTSxLQUFLLEdBQUc7WUFDVixJQUFJLEVBQUUsR0FBRyxDQUFDLE1BQU07WUFDaEIsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSTtZQUMxQixPQUFPLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7U0FDL0IsQ0FBQztRQUVGLElBQUksbUJBQW1CLENBQUMsTUFBTSxHQUFHLFVBQVUsRUFBRSxDQUFDO1lBQzFDLG1CQUFtQixDQUFDLElBQUksQ0FBQztnQkFDckIsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJO2dCQUNoQixJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUk7Z0JBQ2hCLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTzthQUN6QixDQUFDLENBQUM7UUFDUCxDQUFDO0lBQ0wsQ0FBQyxDQUNKLENBQUM7SUFFRixPQUFPLENBQUMsWUFBWSxHQUFHLG1CQUFtQixDQUFDO0lBRzNDLElBQUksUUFBUSxJQUFJLG1CQUFtQixDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUM3QyxNQUFNLFVBQVUsR0FBRyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQyxNQUFNLGVBQWUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxVQUFVLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxVQUFVLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzNGLENBQUM7SUFFRCxPQUFPLE9BQU8sQ0FBQztBQUNuQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgdnNjb2RlIGZyb20gJ3ZzY29kZSc7XG5pbXBvcnQgeyBmb2N1c0VkaXRvclRvb2wgfSBmcm9tICcuL2ZvY3VzX2VkaXRvcic7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZWFyY2hTeW1ib2xUb29sKHtcbiAgICBxdWVyeSxcbiAgICB1c2VEZWZpbml0aW9uID0gdHJ1ZSxcbiAgICBtYXhSZXN1bHRzID0gNTAsXG4gICAgb3BlbkZpbGUgPSBmYWxzZSwgLy8gT3B0aW9uYWw6IE9wZW4gZmlsZXMgYWZ0ZXIgc2VhcmNoXG59OiB7XG4gICAgcXVlcnk6IHN0cmluZztcbiAgICB1c2VEZWZpbml0aW9uPzogYm9vbGVhbjtcbiAgICBtYXhSZXN1bHRzPzogbnVtYmVyO1xuICAgIG9wZW5GaWxlPzogYm9vbGVhbjtcbn0pIHtcbiAgICBjb25zdCByZXN1bHRzOiB7XG4gICAgICAgIGRlZmluaXRpb246IHtcbiAgICAgICAgICAgIGZpbGU6IHN0cmluZztcbiAgICAgICAgICAgIHN0YXJ0TGluZTogbnVtYmVyO1xuICAgICAgICAgICAgc3RhcnRDb2x1bW46IG51bWJlcjtcbiAgICAgICAgICAgIGVuZExpbmU6IG51bWJlcjtcbiAgICAgICAgICAgIGVuZENvbHVtbjogbnVtYmVyO1xuICAgICAgICAgICAgc25pcHBldDogc3RyaW5nO1xuICAgICAgICB9IHwgbnVsbDtcbiAgICAgICAgZ2xvYmFsU2VhcmNoOiBBcnJheTx7IGZpbGU6IHN0cmluZzsgbGluZTogbnVtYmVyOyBzbmlwcGV0OiBzdHJpbmcgfT47XG4gICAgfSA9IHsgZGVmaW5pdGlvbjogbnVsbCwgZ2xvYmFsU2VhcmNoOiBbXSB9O1xuXG4gICAgLy8gVHJ5IFwiR28gdG8gRGVmaW5pdGlvblwiXG4gICAgaWYgKHVzZURlZmluaXRpb24gJiYgdnNjb2RlLndpbmRvdy5hY3RpdmVUZXh0RWRpdG9yKSB7XG4gICAgICAgIGNvbnN0IGVkaXRvciA9IHZzY29kZS53aW5kb3cuYWN0aXZlVGV4dEVkaXRvcjtcbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSBlZGl0b3Iuc2VsZWN0aW9uLmFjdGl2ZTtcbiAgICAgICAgY29uc3QgdXJpID0gZWRpdG9yLmRvY3VtZW50LnVyaTtcblxuICAgICAgICBjb25zdCBkZWZpbml0aW9uUmVzdWx0cyA9IGF3YWl0IHZzY29kZS5jb21tYW5kcy5leGVjdXRlQ29tbWFuZDx2c2NvZGUuTG9jYXRpb25bXT4oXG4gICAgICAgICAgICAndnNjb2RlLmV4ZWN1dGVEZWZpbml0aW9uUHJvdmlkZXInLFxuICAgICAgICAgICAgdXJpLFxuICAgICAgICAgICAgcG9zaXRpb24sXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKGRlZmluaXRpb25SZXN1bHRzICYmIGRlZmluaXRpb25SZXN1bHRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGRlZiA9IGRlZmluaXRpb25SZXN1bHRzWzBdO1xuICAgICAgICAgICAgcmVzdWx0cy5kZWZpbml0aW9uID0ge1xuICAgICAgICAgICAgICAgIGZpbGU6IGRlZi51cmkuZnNQYXRoLFxuICAgICAgICAgICAgICAgIHN0YXJ0TGluZTogZGVmLnJhbmdlLnN0YXJ0LmxpbmUsXG4gICAgICAgICAgICAgICAgc3RhcnRDb2x1bW46IGRlZi5yYW5nZS5zdGFydC5jaGFyYWN0ZXIsXG4gICAgICAgICAgICAgICAgZW5kTGluZTogZGVmLnJhbmdlLmVuZC5saW5lLFxuICAgICAgICAgICAgICAgIGVuZENvbHVtbjogZGVmLnJhbmdlLmVuZC5jaGFyYWN0ZXIsXG4gICAgICAgICAgICAgICAgc25pcHBldDogZGVmLnJhbmdlLnN0YXJ0LmxpbmUgPT09IGRlZi5yYW5nZS5lbmQubGluZSA/IGVkaXRvci5kb2N1bWVudC5nZXRUZXh0KGRlZi5yYW5nZSkgOiAnJyxcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vIFJldXNlIGBmb2N1c0VkaXRvclRvb2xgIGlmIGFwcGxpY2FibGVcbiAgICAgICAgICAgIGlmIChvcGVuRmlsZSkge1xuICAgICAgICAgICAgICAgIGF3YWl0IGZvY3VzRWRpdG9yVG9vbCh7XG4gICAgICAgICAgICAgICAgICAgIGZpbGVQYXRoOiBkZWYudXJpLmZzUGF0aCxcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRMaW5lOiBkZWYucmFuZ2Uuc3RhcnQubGluZSxcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRDb2x1bW46IGRlZi5yYW5nZS5zdGFydC5jaGFyYWN0ZXIsXG4gICAgICAgICAgICAgICAgICAgIGVuZExpbmU6IGRlZi5yYW5nZS5lbmQubGluZSxcbiAgICAgICAgICAgICAgICAgICAgZW5kQ29sdW1uOiBkZWYucmFuZ2UuZW5kLmNoYXJhY3RlcixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFBlcmZvcm0gYSBnbG9iYWwgdGV4dCBzZWFyY2hcbiAgICBjb25zdCBnbG9iYWxTZWFyY2hSZXN1bHRzOiBBcnJheTxhbnk+ID0gW107XG4gICAgYXdhaXQgdnNjb2RlLmNvbW1hbmRzLmV4ZWN1dGVDb21tYW5kPHsgdXJpOiB2c2NvZGUuVXJpOyByYW5nZXM6IHZzY29kZS5SYW5nZVtdOyBwcmV2aWV3OiB7IHRleHQ6IHN0cmluZyB9IH1bXT4oXG4gICAgICAgICd2c2NvZGUuZXhlY3V0ZVdvcmtzcGFjZVN5bWJvbFByb3ZpZGVyJyxcbiAgICAgICAgcXVlcnksXG4gICAgICAgICh7IHVyaSwgcmFuZ2VzLCBwcmV2aWV3IH06IHsgdXJpOiB2c2NvZGUuVXJpOyByYW5nZXM6IHZzY29kZS5SYW5nZVtdOyBwcmV2aWV3OiB7IHRleHQ6IHN0cmluZyB9IH0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0ge1xuICAgICAgICAgICAgICAgIGZpbGU6IHVyaS5mc1BhdGgsXG4gICAgICAgICAgICAgICAgbGluZTogcmFuZ2VzWzBdLnN0YXJ0LmxpbmUsXG4gICAgICAgICAgICAgICAgc25pcHBldDogcHJldmlldy50ZXh0LnRyaW0oKSxcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlmIChnbG9iYWxTZWFyY2hSZXN1bHRzLmxlbmd0aCA8IG1heFJlc3VsdHMpIHtcbiAgICAgICAgICAgICAgICBnbG9iYWxTZWFyY2hSZXN1bHRzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBmaWxlOiBtYXRjaC5maWxlLCAvLyBDb3JyZWN0IHRoZSBrZXkgdG8gJ2ZpbGUnXG4gICAgICAgICAgICAgICAgICAgIGxpbmU6IG1hdGNoLmxpbmUsIC8vIENvcnJlY3Qga2V5L2xvZ2ljXG4gICAgICAgICAgICAgICAgICAgIHNuaXBwZXQ6IG1hdGNoLnNuaXBwZXQsIC8vIENvcnJlY3Qga2V5L2xvZ2ljXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgKTtcblxuICAgIHJlc3VsdHMuZ2xvYmFsU2VhcmNoID0gZ2xvYmFsU2VhcmNoUmVzdWx0cztcblxuICAgIC8vIE9wZW4gdGhlIGZpcnN0IGdsb2JhbCBzZWFyY2ggcmVzdWx0IGlmIHJlcXVlc3RlZFxuICAgIGlmIChvcGVuRmlsZSAmJiBnbG9iYWxTZWFyY2hSZXN1bHRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgZmlyc3RNYXRjaCA9IGdsb2JhbFNlYXJjaFJlc3VsdHNbMF07XG4gICAgICAgIGF3YWl0IGZvY3VzRWRpdG9yVG9vbCh7IGZpbGVQYXRoOiBmaXJzdE1hdGNoLmZpbGUsIGxpbmU6IGZpcnN0TWF0Y2gubGluZSwgY29sdW1uOiAwIH0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHRzO1xufVxuIl19