import * as vscode from 'vscode';
export const focusEditorTool = async ({ filePath, line = 0, column = 0, startLine, startColumn, endLine, endColumn, }) => {
    const uri = vscode.Uri.file(filePath);
    const document = await vscode.workspace.openTextDocument(uri);
    const editor = await vscode.window.showTextDocument(document);
    if (typeof startLine === 'number' &&
        typeof startColumn === 'number' &&
        typeof endLine === 'number' &&
        typeof endColumn === 'number' &&
        (startLine !== 0 || startColumn !== 0 || endLine !== 0 || endColumn !== 0)) {
        const start = new vscode.Position(startLine, startColumn);
        const end = new vscode.Position(endLine, endColumn);
        editor.selection = new vscode.Selection(start, end);
        editor.revealRange(new vscode.Range(start, end), vscode.TextEditorRevealType.InCenter);
        return {
            success: true,
            content: [
                {
                    type: 'text',
                    text: `Focused file: ${filePath} with highlighted range from line ${startLine}, column ${startColumn} to line ${endLine}, column ${endColumn}`,
                },
            ],
        };
    }
    else {
        const position = new vscode.Position(line, column);
        editor.revealRange(new vscode.Range(position, position), vscode.TextEditorRevealType.InCenter);
        editor.selection = new vscode.Selection(position, position);
        return {
            success: true,
            content: [
                {
                    type: 'text',
                    text: `Focused file: ${filePath} at line ${line}, column ${column}`,
                },
            ],
        };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9jdXNfZWRpdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3Rvb2xzL2ZvY3VzX2VkaXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssTUFBTSxNQUFNLFFBQVEsQ0FBQztBQUVqQyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsS0FBSyxFQUFFLEVBQ2xDLFFBQVEsRUFDUixJQUFJLEdBQUcsQ0FBQyxFQUNSLE1BQU0sR0FBRyxDQUFDLEVBQ1YsU0FBUyxFQUNULFdBQVcsRUFDWCxPQUFPLEVBQ1AsU0FBUyxHQVNaLEVBR0UsRUFBRTtJQUNELE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3RDLE1BQU0sUUFBUSxHQUFHLE1BQU0sTUFBTSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM5RCxNQUFNLE1BQU0sR0FBRyxNQUFNLE1BQU0sQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUM7SUFHOUQsSUFDSSxPQUFPLFNBQVMsS0FBSyxRQUFRO1FBQzdCLE9BQU8sV0FBVyxLQUFLLFFBQVE7UUFDL0IsT0FBTyxPQUFPLEtBQUssUUFBUTtRQUMzQixPQUFPLFNBQVMsS0FBSyxRQUFRO1FBRTdCLENBQUMsU0FBUyxLQUFLLENBQUMsSUFBSSxXQUFXLEtBQUssQ0FBQyxJQUFJLE9BQU8sS0FBSyxDQUFDLElBQUksU0FBUyxLQUFLLENBQUMsQ0FBQyxFQUM1RSxDQUFDO1FBQ0MsTUFBTSxLQUFLLEdBQUcsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUMxRCxNQUFNLEdBQUcsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3BELE1BQU0sQ0FBQyxTQUFTLEdBQUcsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNwRCxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLEVBQUUsTUFBTSxDQUFDLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3ZGLE9BQU87WUFDSCxPQUFPLEVBQUUsSUFBSTtZQUNiLE9BQU8sRUFBRTtnQkFDTDtvQkFDSSxJQUFJLEVBQUUsTUFBZTtvQkFDckIsSUFBSSxFQUFFLGlCQUFpQixRQUFRLHFDQUFxQyxTQUFTLFlBQVksV0FBVyxZQUFZLE9BQU8sWUFBWSxTQUFTLEVBQUU7aUJBQ2pKO2FBQ0o7U0FDSixDQUFDO0lBQ04sQ0FBQztTQUFNLENBQUM7UUFFSixNQUFNLFFBQVEsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ25ELE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsRUFBRSxNQUFNLENBQUMsb0JBQW9CLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDL0YsTUFBTSxDQUFDLFNBQVMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBRTVELE9BQU87WUFDSCxPQUFPLEVBQUUsSUFBSTtZQUNiLE9BQU8sRUFBRTtnQkFDTDtvQkFDSSxJQUFJLEVBQUUsTUFBZTtvQkFDckIsSUFBSSxFQUFFLGlCQUFpQixRQUFRLFlBQVksSUFBSSxZQUFZLE1BQU0sRUFBRTtpQkFDdEU7YUFDSjtTQUNKLENBQUM7SUFDTixDQUFDO0FBQ0wsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgdnNjb2RlIGZyb20gJ3ZzY29kZSc7XG5cbmV4cG9ydCBjb25zdCBmb2N1c0VkaXRvclRvb2wgPSBhc3luYyAoe1xuICAgIGZpbGVQYXRoLFxuICAgIGxpbmUgPSAwLFxuICAgIGNvbHVtbiA9IDAsXG4gICAgc3RhcnRMaW5lLFxuICAgIHN0YXJ0Q29sdW1uLFxuICAgIGVuZExpbmUsXG4gICAgZW5kQ29sdW1uLFxufToge1xuICAgIGZpbGVQYXRoOiBzdHJpbmc7XG4gICAgbGluZT86IG51bWJlcjtcbiAgICBjb2x1bW4/OiBudW1iZXI7XG4gICAgc3RhcnRMaW5lPzogbnVtYmVyO1xuICAgIHN0YXJ0Q29sdW1uPzogbnVtYmVyO1xuICAgIGVuZExpbmU/OiBudW1iZXI7XG4gICAgZW5kQ29sdW1uPzogbnVtYmVyO1xufSk6IFByb21pc2U8e1xuICAgIHN1Y2Nlc3M6IGJvb2xlYW47XG4gICAgY29udGVudDogeyB0eXBlOiAndGV4dCc7IHRleHQ6IHN0cmluZyB9W107XG59PiA9PiB7XG4gICAgY29uc3QgdXJpID0gdnNjb2RlLlVyaS5maWxlKGZpbGVQYXRoKTtcbiAgICBjb25zdCBkb2N1bWVudCA9IGF3YWl0IHZzY29kZS53b3Jrc3BhY2Uub3BlblRleHREb2N1bWVudCh1cmkpOyAvLyBPcGVuIHRoZSBkb2N1bWVudFxuICAgIGNvbnN0IGVkaXRvciA9IGF3YWl0IHZzY29kZS53aW5kb3cuc2hvd1RleHREb2N1bWVudChkb2N1bWVudCk7IC8vIFNob3cgaXQgaW4gdGhlIGVkaXRvclxuXG4gICAgLy8gSGlnaGxpZ2h0IHJhbmdlIGlmIGFsbCByYW5nZSBwYXJhbWV0ZXJzIGFyZSBwcm92aWRlZFxuICAgIGlmIChcbiAgICAgICAgdHlwZW9mIHN0YXJ0TGluZSA9PT0gJ251bWJlcicgJiZcbiAgICAgICAgdHlwZW9mIHN0YXJ0Q29sdW1uID09PSAnbnVtYmVyJyAmJlxuICAgICAgICB0eXBlb2YgZW5kTGluZSA9PT0gJ251bWJlcicgJiZcbiAgICAgICAgdHlwZW9mIGVuZENvbHVtbiA9PT0gJ251bWJlcicgJiZcbiAgICAgICAgLy8gRW5zdXJlIHRoYXQgYSB2YWxpZCByYW5nZSBpcyBwcm92aWRlZCBieSBjaGVja2luZyB0aGF0IHRoZSBzdGFydCBhbmQgZW5kIGFyZSBub3QgYm90aCB6ZXJvc1xuICAgICAgICAoc3RhcnRMaW5lICE9PSAwIHx8IHN0YXJ0Q29sdW1uICE9PSAwIHx8IGVuZExpbmUgIT09IDAgfHwgZW5kQ29sdW1uICE9PSAwKVxuICAgICkge1xuICAgICAgICBjb25zdCBzdGFydCA9IG5ldyB2c2NvZGUuUG9zaXRpb24oc3RhcnRMaW5lLCBzdGFydENvbHVtbik7XG4gICAgICAgIGNvbnN0IGVuZCA9IG5ldyB2c2NvZGUuUG9zaXRpb24oZW5kTGluZSwgZW5kQ29sdW1uKTtcbiAgICAgICAgZWRpdG9yLnNlbGVjdGlvbiA9IG5ldyB2c2NvZGUuU2VsZWN0aW9uKHN0YXJ0LCBlbmQpO1xuICAgICAgICBlZGl0b3IucmV2ZWFsUmFuZ2UobmV3IHZzY29kZS5SYW5nZShzdGFydCwgZW5kKSwgdnNjb2RlLlRleHRFZGl0b3JSZXZlYWxUeXBlLkluQ2VudGVyKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgICBjb250ZW50OiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGV4dCcgYXMgY29uc3QsXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IGBGb2N1c2VkIGZpbGU6ICR7ZmlsZVBhdGh9IHdpdGggaGlnaGxpZ2h0ZWQgcmFuZ2UgZnJvbSBsaW5lICR7c3RhcnRMaW5lfSwgY29sdW1uICR7c3RhcnRDb2x1bW59IHRvIGxpbmUgJHtlbmRMaW5lfSwgY29sdW1uICR7ZW5kQ29sdW1ufWAsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTW92ZSB0aGUgY3Vyc29yIHRvIHRoZSBzcGVjaWZpZWQgcG9zaXRpb25cbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSBuZXcgdnNjb2RlLlBvc2l0aW9uKGxpbmUsIGNvbHVtbik7XG4gICAgICAgIGVkaXRvci5yZXZlYWxSYW5nZShuZXcgdnNjb2RlLlJhbmdlKHBvc2l0aW9uLCBwb3NpdGlvbiksIHZzY29kZS5UZXh0RWRpdG9yUmV2ZWFsVHlwZS5JbkNlbnRlcik7XG4gICAgICAgIGVkaXRvci5zZWxlY3Rpb24gPSBuZXcgdnNjb2RlLlNlbGVjdGlvbihwb3NpdGlvbiwgcG9zaXRpb24pO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgY29udGVudDogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3RleHQnIGFzIGNvbnN0LFxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiBgRm9jdXNlZCBmaWxlOiAke2ZpbGVQYXRofSBhdCBsaW5lICR7bGluZX0sIGNvbHVtbiAke2NvbHVtbn1gLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICB9O1xuICAgIH1cbn07XG4iXX0=