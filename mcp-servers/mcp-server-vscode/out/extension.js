import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';
import { SSEServerTransport } from '@modelcontextprotocol/sdk/server/sse.js';
import dedent from 'dedent';
import express from 'express';
import * as http from 'http';
import * as vscode from 'vscode';
import { DiagnosticSeverity } from 'vscode';
import { z } from 'zod';
import packageJson from '../package.json';
import { codeCheckerTool } from './tools/code_checker';
import { listDebugSessions, listDebugSessionsSchema, startDebugSession, startDebugSessionSchema, stopDebugSession, stopDebugSessionSchema, } from './tools/debug_tools';
import { focusEditorTool } from './tools/focus_editor';
import { resolvePort } from './utils/port';
const extensionName = 'vscode-mcp-server';
const extensionDisplayName = 'VSCode MCP Server';
export const activate = async (context) => {
    const outputChannel = vscode.window.createOutputChannel(extensionDisplayName);
    outputChannel.appendLine(`Activating ${extensionDisplayName}...`);
    const mcpServer = new McpServer({
        name: extensionName,
        version: packageJson.version,
    });
    mcpServer.tool('code_checker', dedent `
            Retrieve diagnostics from VSCode's language services for the active workspace.
            Use this tool after making changes to any code in the filesystem to ensure no new
            errors were introduced, or when requested by the user.
        `.trim(), {
        severityLevel: z
            .enum(['Error', 'Warning', 'Information', 'Hint'])
            .default('Warning')
            .describe("Minimum severity level for checking issues: 'Error', 'Warning', 'Information', or 'Hint'."),
    }, async (params) => {
        const severityLevel = params.severityLevel
            ? DiagnosticSeverity[params.severityLevel]
            : DiagnosticSeverity.Warning;
        const result = await codeCheckerTool(severityLevel);
        return {
            ...result,
            content: result.content.map((c) => ({
                ...c,
                text: typeof c.text === 'string' ? c.text : String(c.text),
                type: 'text',
            })),
        };
    });
    mcpServer.tool('focus_editor', dedent `
        Open the specified file in the VSCode editor and navigate to a specific line and column.
        Use this tool to bring a file into focus and position the editor's cursor where desired.
        Note: This tool operates on the editor visual environment so that the user can see the file. It does not return the file contents in the tool call result.
        `.trim(), {
        filePath: z.string().describe('The absolute path to the file to focus in the editor.'),
        line: z.number().int().min(0).default(0).describe('The line number to navigate to (default: 0).'),
        column: z.number().int().min(0).default(0).describe('The column position to navigate to (default: 0).'),
        startLine: z.number().int().min(0).optional().describe('The starting line number for highlighting.'),
        startColumn: z.number().int().min(0).optional().describe('The starting column number for highlighting.'),
        endLine: z.number().int().min(0).optional().describe('The ending line number for highlighting.'),
        endColumn: z.number().int().min(0).optional().describe('The ending column number for highlighting.'),
    }, async (params) => {
        const result = await focusEditorTool(params);
        return result;
    });
    mcpServer.tool('list_debug_sessions', 'List all active debug sessions in the workspace.', listDebugSessionsSchema.shape, async () => {
        const result = await listDebugSessions();
        return {
            ...result,
            content: result.content.map((item) => ({ type: 'text', text: JSON.stringify(item.json) })),
        };
    });
    mcpServer.tool('start_debug_session', 'Start a new debug session with the provided configuration.', startDebugSessionSchema.shape, async (params) => {
        const result = await startDebugSession(params);
        return {
            ...result,
            content: result.content.map((item) => ({
                ...item,
                type: 'text',
            })),
        };
    });
    mcpServer.tool('restart_debug_session', 'Restart a debug session by stopping it and then starting it with the provided configuration.', startDebugSessionSchema.shape, async (params) => {
        await stopDebugSession({ sessionName: params.configuration.name });
        const result = await startDebugSession(params);
        return {
            ...result,
            content: result.content.map((item) => ({
                ...item,
                type: 'text',
            })),
        };
    });
    mcpServer.tool('stop_debug_session', 'Stop all debug sessions that match the provided session name.', stopDebugSessionSchema.shape, async (params) => {
        const result = await stopDebugSession(params);
        return {
            ...result,
            content: result.content.map((item) => ({
                ...item,
                type: 'text',
            })),
        };
    });
    const app = express();
    const mcpConfig = vscode.workspace.getConfiguration('mcpServer');
    const port = await resolvePort(mcpConfig.get('port', 6010));
    let sseTransport;
    app.get('/sse', async (_req, res) => {
        outputChannel.appendLine('SSE connection initiated...');
        sseTransport = new SSEServerTransport('/messages', res);
        try {
            await mcpServer.connect(sseTransport);
            outputChannel.appendLine('MCP Server connected via SSE.');
            outputChannel.appendLine(`SSE Transport sessionId: ${sseTransport.sessionId}`);
        }
        catch (err) {
            outputChannel.appendLine('Error connecting MCP Server via SSE: ' + err);
        }
    });
    app.post('/messages', express.json(), async (req, res) => {
        outputChannel.appendLine(`POST /messages: Payload - ${JSON.stringify(req.body, null, 2)}`);
        if (sseTransport) {
            outputChannel.appendLine(`SSE Transport sessionId: ${sseTransport.sessionId}`);
            try {
                await sseTransport.handlePostMessage(req, res, req.body);
                outputChannel.appendLine('Handled POST /messages successfully.');
            }
            catch (err) {
                outputChannel.appendLine('Error handling POST /messages: ' + err);
            }
        }
        else {
            res.status(500).send('SSE Transport not initialized.');
            outputChannel.appendLine('POST /messages failed: SSE Transport not initialized.');
        }
    });
    const server = http.createServer(app);
    function startServer(port) {
        server.listen(port, () => {
            outputChannel.appendLine(`MCP SSE Server running at http://127.0.0.1:${port}/sse`);
        });
        context.subscriptions.push({
            dispose: () => {
                server.close();
                outputChannel.dispose();
            },
        });
    }
    const startOnActivate = mcpConfig.get('startOnActivate', true);
    if (startOnActivate) {
        startServer(port);
    }
    else {
        outputChannel.appendLine('MCP Server startup disabled by configuration.');
    }
    context.subscriptions.push(vscode.commands.registerCommand('mcpServer.stopServer', () => {
        if (!server.listening) {
            vscode.window.showWarningMessage('MCP Server is not running.');
            outputChannel.appendLine('Attempted to stop the MCP Server, but it is not running.');
            return;
        }
        server.close(() => {
            outputChannel.appendLine('MCP Server stopped.');
            vscode.window.showInformationMessage('MCP Server stopped.');
        });
    }));
    context.subscriptions.push(vscode.commands.registerCommand('mcpServer.startServer', async () => {
        if (server.listening) {
            vscode.window.showWarningMessage('MCP Server is already running.');
            outputChannel.appendLine('Attempted to start the MCP Server, but it is already running.');
            return;
        }
        const newPort = await resolvePort(mcpConfig.get('port', 6010));
        startServer(newPort);
        outputChannel.appendLine(`MCP Server started on port ${newPort}.`);
        vscode.window.showInformationMessage(`MCP Server started on port ${newPort}.`);
    }));
    context.subscriptions.push(vscode.commands.registerCommand('mcpServer.setPort', async () => {
        const newPortInput = await vscode.window.showInputBox({
            prompt: 'Enter new port number for the MCP Server:',
            value: String(port),
            validateInput: (input) => {
                const num = Number(input);
                if (isNaN(num) || num < 1 || num > 65535) {
                    return 'Please enter a valid port number (1-65535).';
                }
                return null;
            },
        });
        if (newPortInput && newPortInput.trim().length > 0) {
            const newPort = Number(newPortInput);
            await vscode.workspace
                .getConfiguration('mcpServer')
                .update('port', newPort, vscode.ConfigurationTarget.Global);
            server.close();
            startServer(newPort);
            outputChannel.appendLine(`MCP Server restarted on port ${newPort}`);
            vscode.window.showInformationMessage(`MCP Server restarted on port ${newPort}`);
        }
    }));
    outputChannel.appendLine(`${extensionDisplayName} activated.`);
};
export function deactivate() {
}
//# sourceMappingURL=data:application/json;base64,