import getPort from 'get-port';
import * as vscode from 'vscode';
export async function resolvePort(desiredPort) {
    const availablePort = await getPort({ port: desiredPort });
    if (availablePort !== desiredPort) {
        const userInput = await vscode.window.showInputBox({
            prompt: `Port ${desiredPort} is in use. Enter a new port or press Enter to use the available port (${availablePort}):`,
            value: String(availablePort),
            validateInput: (input) => {
                const num = Number(input);
                if (isNaN(num) || num < 1 || num > 65535) {
                    return 'Please enter a valid port number (1-65535).';
                }
                return null;
            },
        });
        if (userInput && userInput.trim().length > 0) {
            const newPort = Number(userInput);
            return resolvePort(newPort);
        }
        return availablePort;
    }
    return availablePort;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9wb3J0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sT0FBTyxNQUFNLFVBQVUsQ0FBQztBQUMvQixPQUFPLEtBQUssTUFBTSxNQUFNLFFBQVEsQ0FBQztBQUVqQyxNQUFNLENBQUMsS0FBSyxVQUFVLFdBQVcsQ0FBQyxXQUFtQjtJQUVqRCxNQUFNLGFBQWEsR0FBRyxNQUFNLE9BQU8sQ0FBQyxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFDO0lBRzNELElBQUksYUFBYSxLQUFLLFdBQVcsRUFBRSxDQUFDO1FBQ2hDLE1BQU0sU0FBUyxHQUFHLE1BQU0sTUFBTSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUM7WUFDL0MsTUFBTSxFQUFFLFFBQVEsV0FBVywwRUFBMEUsYUFBYSxJQUFJO1lBQ3RILEtBQUssRUFBRSxNQUFNLENBQUMsYUFBYSxDQUFDO1lBQzVCLGFBQWEsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO2dCQUNyQixNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQzFCLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLElBQUksR0FBRyxHQUFHLEtBQUssRUFBRSxDQUFDO29CQUN2QyxPQUFPLDZDQUE2QyxDQUFDO2dCQUN6RCxDQUFDO2dCQUNELE9BQU8sSUFBSSxDQUFDO1lBQ2hCLENBQUM7U0FDSixDQUFDLENBQUM7UUFDSCxJQUFJLFNBQVMsSUFBSSxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQzNDLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUNsQyxPQUFPLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNoQyxDQUFDO1FBQ0QsT0FBTyxhQUFhLENBQUM7SUFDekIsQ0FBQztJQUNELE9BQU8sYUFBYSxDQUFDO0FBQ3pCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZ2V0UG9ydCBmcm9tICdnZXQtcG9ydCc7XG5pbXBvcnQgKiBhcyB2c2NvZGUgZnJvbSAndnNjb2RlJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlc29sdmVQb3J0KGRlc2lyZWRQb3J0OiBudW1iZXIpOiBQcm9taXNlPG51bWJlcj4ge1xuICAgIC8vIFRyeSB0byBnZXQgdGhlIGRlc2lyZWQgcG9ydCBvciB0aGUgbmV4dCBhdmFpbGFibGUgcG9ydFxuICAgIGNvbnN0IGF2YWlsYWJsZVBvcnQgPSBhd2FpdCBnZXRQb3J0KHsgcG9ydDogZGVzaXJlZFBvcnQgfSk7XG5cbiAgICAvLyBJZiB0aGUgYXZhaWxhYmxlIHBvcnQgaXMgbm90IHRoZSBzYW1lIGFzIHRoZSBkZXNpcmVkIHBvcnQsIHByb21wdCB0aGUgdXNlclxuICAgIGlmIChhdmFpbGFibGVQb3J0ICE9PSBkZXNpcmVkUG9ydCkge1xuICAgICAgICBjb25zdCB1c2VySW5wdXQgPSBhd2FpdCB2c2NvZGUud2luZG93LnNob3dJbnB1dEJveCh7XG4gICAgICAgICAgICBwcm9tcHQ6IGBQb3J0ICR7ZGVzaXJlZFBvcnR9IGlzIGluIHVzZS4gRW50ZXIgYSBuZXcgcG9ydCBvciBwcmVzcyBFbnRlciB0byB1c2UgdGhlIGF2YWlsYWJsZSBwb3J0ICgke2F2YWlsYWJsZVBvcnR9KTpgLFxuICAgICAgICAgICAgdmFsdWU6IFN0cmluZyhhdmFpbGFibGVQb3J0KSxcbiAgICAgICAgICAgIHZhbGlkYXRlSW5wdXQ6IChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IG51bSA9IE51bWJlcihpbnB1dCk7XG4gICAgICAgICAgICAgICAgaWYgKGlzTmFOKG51bSkgfHwgbnVtIDwgMSB8fCBudW0gPiA2NTUzNSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1BsZWFzZSBlbnRlciBhIHZhbGlkIHBvcnQgbnVtYmVyICgxLTY1NTM1KS4nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodXNlcklucHV0ICYmIHVzZXJJbnB1dC50cmltKCkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgbmV3UG9ydCA9IE51bWJlcih1c2VySW5wdXQpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVQb3J0KG5ld1BvcnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhdmFpbGFibGVQb3J0O1xuICAgIH1cbiAgICByZXR1cm4gYXZhaWxhYmxlUG9ydDtcbn1cbiJdfQ==