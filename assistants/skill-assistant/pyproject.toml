[tool.poetry]
name = "assistant"
version = "0.1.0"
description = "Exploration of a skill assistant library assistant (name to be updated)."
authors = ["Semantic Workbench Team"]
readme = "README.md"
packages = [{ include = "assistant" }]

[tool.poetry.dependencies]
python = "~3.11"
azure-ai-contentsafety = "^1.0.0"
azure-identity = "^1.16.0"
azure-core = { version = "*", extras = ["aio"] }
openai = "^1.3.9"

semantic-workbench-assistant = { path = "../../semantic-workbench/v1/service/semantic-workbench-assistant", develop = true }

chat_driver = { path = "../../libraries/chat-driver", develop = true }
context = { path = "../../libraries/context", develop = true }
events = { path = "../../libraries/events", develop = true }

posix-skill = { path = "../../skills/skills/posix-skill", develop = true }
skill-library = { path = "../../skills/skill-library", develop = true }

azure-content-safety-evaluator = { path = "../../libraries/content-safety-evaluators/azure-content-safety-evaluator", develop = true }
openai-content-safety-evaluator = { path = "../../libraries/content-safety-evaluators/openai-content-safety-evaluator", develop = true }

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.1"
pytest-asyncio = "^0.23.8"
ruff = "^0.6.4"

[build-system]
requires = ["poetry-core>=1.2.0"]
build-backend = "poetry.core.masonry.api"

[tool.pyright]
exclude = ["venv", ".venv"]
